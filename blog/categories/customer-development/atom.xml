<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: customer development | Leknarf]]></title>
  <link href="http://leknarf.net/blog/categories/customer-development/atom.xml" rel="self"/>
  <link href="http://leknarf.net/"/>
  <updated>2013-09-02T06:50:52-04:00</updated>
  <id>http://leknarf.net/</id>
  <author>
    <name><![CDATA[Andrew Frankel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't limit people to business or technical roles]]></title>
    <link href="http://leknarf.net/blog/2013/05/18/dont-limit-people-to-business-or-technical-roles/"/>
    <updated>2013-05-18T17:48:00-04:00</updated>
    <id>http://leknarf.net/blog/2013/05/18/dont-limit-people-to-business-or-technical-roles</id>
    <content type="html"><![CDATA[<p>Startup founders and employees often describe their role as being either a Business or Technical. Developers, designers, QA testers, etc. are grouped together as part of the engineering/technical team, while product managers, sales, and marketers are part of the business team.</p>

<p>Although common, this division misses the point: there are two essential functions for product company and neither is strictly business or strictly technical. Specifically, these are:</p>

<ol>
<li>Identify a market of people with similar problems, a willingness to pay someone to solve those problems, and the ability to pay for that solution.</li>
<li>Create a product that solves or alleviates a problem, in a repeatable manner, at a cost that is less than the value it provides.</li>
</ol>


<!-- more -->


<h2>The Marketing and Product roles/teams</h2>

<p>I like to refer to the first function as marketing, given that the focus is on identifying a viable market. In this sense, I'm following <a href="http://leknarf.net/blog/2013/03/01/startups-should-spend-more-on-marketing-than-engineering/">Grabowski's definition of marketing</a>. This distinguishes the term "marketing" from promotion or sales activates, which are focused on finding customers for an existing solution or convincing potential customers to pay for that solution. Lean Startup adherents might prefer the term "customer development" instead of marketing, but I use the two interchangeably. At it simplest, marketing is about identifying a problem, then verifying that someone is both willing and able to pay for something that alleviates that problem.</p>

<p>Everything related to solving that problem is product development, including all software development, requirements gathering, design work, etc.. As a developer, I usually find it easiest to explain my ideas about how to solve a problem using code. My initial idea for how to approach a problem is almost never the correct one, so I find it easier to build a small prototype that I can interact with and improve iteratively. Other people might find it easier to express their thoughts in wireframes, presentation decks, or even by writing detailed spec documents. Regardless, the focus here is on creating a solution.</p>

<h2>Sharing responsibility by defining roles</h2>

<p>Defining roles this way can help the marketing and product teams have healthy conversations about where their responsibilities intersect. Everyone at a startup needs to contribute to discovering a viable business model. Delegating this responsibility to a single business co-founder or a siloed team can be disastrous. Instead, the marketing and product teams should focus on their specialities and then discuss the results. Marketing's responsibility is to estimate that a given market will be worth X dollars. Product's responsibility is to estimate that a given solution will cost Y dollars to produce. If X is greater than Y and your estimates are correct, then you might have a viable business model! If not, then your company needs to find a better market, figure out a cheaper product, or both.</p>

<h2>Avoid distractions</h2>

<p>Defining roles in this way can help avoid distractions. Skilled individuals are usually very well practiced at activities they enjoy doing. Experienced marketers usually enjoy the company of other people and can easily fill a schedule with meetings and conversations. Likewise, It's tempting, even enjoyable, for a programmer to spend months building a perfectly crafted engineering marvel. But in both cases, if those activities aren't directed at finding a problem or figuring out a solution, they are ultimately wasted efforts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startups should spend more on marketing than engineering]]></title>
    <link href="http://leknarf.net/blog/2013/03/01/startups-should-spend-more-on-marketing-than-engineering/"/>
    <updated>2013-03-01T06:00:00-05:00</updated>
    <id>http://leknarf.net/blog/2013/03/01/startups-should-spend-more-on-marketing-than-engineering</id>
    <content type="html"><![CDATA[<p>Grabowski's <a href="/assets/grabowski_marketing.pdf">Who Is Going To Buy The Darn Thing?</a> isn't nearly as popular as Steve Blank's various works, but both share a similar underlying sentiment: that a startup's marketing functions are as important if not more important than product development.</p>

<p>Grabowski's contribution is a simple quantitative metric, the Marketing/Engineering ratio, and the claim that successful startups spend more on marketing than engineering (an M/E ratio greater than 1).</p>

<h2>Defining the M/E ratio</h2>

<p>To start, it's important to clarify what "marketing" is in this context. Although the term is often used to describe a broad range of activities including sales and advertising, Grabowski takes a much narrower view:</p>

<p><blockquote><p>Marketing is defined as the up-front process that comes before the product is ready. (Promoting and selling come after the product is ready.)</p><footer><strong>Grabowski "Who Is Going To Buy The Darn Thing?"</strong></footer></blockquote></p>

<p>Grabowski's writing pre-dates the Lean Startup Movement, so his definition unfortunately implies a hard separation between pre-launch and post-launch activities. Viewed from a Lean perspective, he is essentially arguing that "learning" have its own line item on a budget and that startups should spend more time/effort/money on learning instead of building. Arguing for an M/E ratio greater than 1 is just another way of saying we should spend more time learning about what to build than actually building. That's a fairly obvious statement when put plainly, but it's still surprising how many entrepreneurs get mired down in product development before actually confirming that their target market exists.</p>

<!-- more -->


<p>Distinguishing marketing from sales makes the M/E ratio a particularly strong statement. Many startups implicitly group marketing, advertising, and sales into one "customer acquisition" category. While advertising and sales are important (I think many startups would benefit from increasing their advertising budgets), they are not a substitute for true marketing efforts, which should be focused on discovering customer needs. Just spending equal amounts on engineering and customer acquisition is not enough. Startups need to invest in learning before and while building a product and then again invest in sales once a product begins to find market fit. I agree with <a href="http://davidcummings.org/2011/04/25/the-31-customer-acquisition-to-engineering-spend-ratio/">David Cummings' claim</a> that startups should budget for a 3:1 customer acquisition to engineering ratio, but would go one step further and argue that a significant part (more than half) of that customer acquisition spend should go to upfront marketing.</p>

<p>In fact, many sales teams don't understand marketing. Although sales and marketing are often seen as complementary skill sets, Grabowski cites an example of a firm where: "Many engineering efforts had been urged by the sales force, which had hoped to exhibit technology that would make customers' jaws drop." He goes on to describe this as a common pitfall: "Mistaking selling for marketing". Sales teams are well positioned to communicate with customers, but there is a fundamental difference between pitching your wares and listening to what the customer wants. The best salesmen already know to listen to their customers, but not everyone has the patience and charm of <a href="http://www.amazon.com/gp/product/0671027034/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0671027034&amp;linkCode=as2&amp;tag=leknarf-20">Dale Carnegie</a>.</p>

<h2>Minimizing risk</h2>

<p><blockquote><p>Technology-based startups present two types of technical risk. First, there is the risk that the startup cannot make the technology work. The second risk [â€¦] is that the startup does make the technology work, but that they are developing the wrong technology. Up-front marketing can guide engineering to the right technology.</p><footer><strong>Grabowski "Who Is Going To Buy The Darn Thing?"</strong></footer></blockquote></p>

<p>The embarrassing truth for most developers is that software engineering is relatively easy: few software companies have failed because they couldn't get their technology to work. Pharmaceutical companies have real technology risk: you could easily spend millions trying to develop a cure that never works. Aerospace companies have real technology risk: a single unchecked failure would not only destroy the company, it could literally kill.</p>

<p>For most software companies, the worst case scenario is that the product needs to be shelved for 6 months while the engineering team re-architects from scratch. Twitter and Tumbler both went those phases of significant instability when their user base outgrew the capacity of their early prototypes, but both were able to overhaul their software with minimal business impact. Spending 6 months building something that no one wants is much worse than spending 1 month building something desirable that doesn't work.</p>

<h2>Budgeting for marketing</h2>

<p>The Marketing/Engineering ratio's iron-clad simplicity is its main appeal. It's easy to read Steve Blank, decide to "get out of the building", and then completely shirk any meaningful change in activity. If a single founder worked 4 days a week writing software and spent the fifth talking to customers, he might feel like he's following Steve Blank's advice, but an M/E ratio of .25 is clearly substandard according to Grabowski.</p>

<p>That simplicity is wonderful for planning. I have woefully little experience crafting marketing plans for new products, but have been preparing engineering estimates for most of my career. Targeting an M/E ratio (or more), makes it easy to infer the marketing budget from engineering estimates:</p>

<p><blockquote><p>Engineers know how to develop an engineering budget. Simply use the engineering budget to establish the size and timing of the up-front marketing budget.</p><footer><strong>Grabowski "Who Is Going To Buy The Darn Thing?"</strong></footer></blockquote></p>

<p>Committing to this ratio and maintaining it for the life of a project is a natural check on feature sprawl and cost-overruns. If someone wants to add a pet feature that "only" requires one-engineering-week of effort, he'd best invest one-marketing-week upfront to verify the feature is actually desirable. If the initial engineering estimates were low and it's now clear that the project will require 3 times as much development time, then the company should increase its marketing efforts 3-fold.</p>

<p>Conversely, cheap engineering efforts can be pursued with minimal marketing. If the concept for a new feature can accurately be expressed as a 1-day MVP, then the team only needs to spend 1 day interviewing customers before proceeding.</p>

<p>By establishing a firm M/E ratio, startups can align the interests of their marketing and engineering teams. Instead of throwing new feature requests over the wall, marketers are incentivised to justify their requests with firm data, since additional engineering commitments will also place additional demands on the marketing team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Kickstarter as your MVP]]></title>
    <link href="http://leknarf.net/blog/2013/02/19/using-kickstarter-as-your-mvp/"/>
    <updated>2013-02-19T07:29:00-05:00</updated>
    <id>http://leknarf.net/blog/2013/02/19/using-kickstarter-as-your-mvp</id>
    <content type="html"><![CDATA[<p>I've been thinking of various ways to validate a startup idea and <a href="http://kickstarter.com">Kickstarter</a> stands out as an exceptionally interesting option. This idea isn't strictly new, <a href="http://customerdevlabs.com/2012/12/02/crowdtesting-using-crowdfunding-kickstarter-test-an-mvp/">Justin Wilcox</a> described the concept on his blog and at the 2012 Lean Startup Conference.</p>

<h2>What is an MVP?</h2>

<p>The term Minimum Viable Product is often abused. Sometimes used as a synonym for "prototype", some so-called MVPs have an excess of fully-developed features that are irrelevant to testing customer interest. A common mistake is to assume that a MVP needs to satisfy a customer in order to be viable, which can easily lead to building a full prototype.</p>

<p>Eric Ries offers a concise description of how IMVU should have started, instead of building a prototype:</p>

<p><blockquote><p>What we should have done, and what we did for a lot of features thereafter, is started with a landing page that promised people that product. Then we should have taken out the AdWords we were planning to take out, drive traffic to that landing page, and offer people to buy the experience that we are talking about.</p></p><p><p>What we would have found out if we were doing that experiment is 0% of people would have clicked through, which means it doesnâ€™t matter what is on the second page.</p><footer><strong>Eric Ries</strong> <cite><a href='http://www.startuplessonslearned.com/2009/03/minimum-viable-product.html'>What Is the Minimum Viable Product?</a></cite></footer></blockquote></p>

<p>A proper MVP just needs to test whether someone would pay for a product or service, it doesn't need to include (and should not include) any of the actual features.</p>

<h2>Enter crowdfunding</h2>

<p>A Crowdfunding campaign is not a way to test an MVP, it is an MVP in its own right. Ideally, you should be able to launch and complete a crowdfunding campaign without building a prototype. In fact, the core features of a Kickstarter campaign are effectively the same as any MVP:</p>

<!-- more -->


<ul>
<li>A high level description of your concept</li>
<li>A way for people to pay</li>
<li>A time limit, after which point an unsuccessful campaign must be abandoned</li>
</ul>


<p>Starting with a crowdfunding campaign instead of a prototype avoids many of the common lean stumbling blocks. When building a software prototype MVP, it's difficult to decide how much effort should go into frontend design work. On one hand, any work that doesn't add new functionality doesn't seem to be minimal, so polishing an app's appearance should be considered waste. But an ugly product is obviously unmarketable, so some amount of polish is important. With a kickstarter campaign, it's clear that including a video dramatically improves conversion and is worth the effort. But it's also obvious that spending 6 months of full time effort to craft the perfect landing page isn't worthwhile. Preparing a campaign naturally forces you to focus on marketing instead of development, which is much more valuable in a startup's initial stage.</p>

<p>The emphasis on collecting payment avoids another potential mistake. A landing page that receives 100,000 unique visitors in a month is impressive, but is ultimately a failure unless some of those 100,000 are willing to pay. Crowdfunding doesn't force you to monetize your actual product immediately, but it does ensure that at least some of your customers are willing to spend money.</p>

<p>The time limit dramatically reduces your risks as a entrepreneur. Specifically, it limits your opportunity risk. If you launch a crowdfunding campaign and fail to meet your goal in the time alloted, then you have a pretty clear signal to move on and try something else. Successfully funding a campaign doesn't guarantee that your target market is large enough to support a company, but it at least confirms the market exists.</p>

<h2>What to offer in your campaign</h2>

<p>Not only does a crowdfunding campaign replace building a prototype, it lets you consider prototype ideas that wouldn't be commercially viable in their own right. For example, freemium apps are increasingly becoming the dominant model for mobile apps (<a href="http://build.developereconomics.com/freemium-beats-premium-says-app-annie/">freemium apps generate 69 percent of the worldwide iOS app revenue and 75 percent of global Android app revenues</a>). I'd be hesitant to develop a free app without funding, but would be very happy to build a free app to meet a crowdfunding obligation. I could then expand that free app with premium features later, hopefully turning a small project into a sustainable business. Even if those premium features fail, at least I'd have the crowdfunding proceeds as compensation for my time. Alternatively, if you already had a moderately popular app, you could use crowdfunding to fund new features, thus ensuring that you only build new features that people actually want.</p>

<p>Nor is there anything wrong with using crowdfunding to raise capital for actual commercial products. <a href="http://www.kickstarter.com/projects/597507018/pebble-e-paper-watch-for-iphone-and-android">Pebble</a> is selling a watch for $150 after raising more than 10 million dollars on Kickstarter. Although part of me feels that collecting donations is more appropriate for artistic or free projects, the truth is that commercial projects are completely ethical. If your description is honest and backers contribute voluntarily, then you have no moral obligation to provide anything other than what you explicitly promise.</p>

<h2>Defining your goal</h2>

<p>Unlike a traditional crowdfunding campaign, the fundamental goal of a crowdfunding MVP isn't to raise capital. Money is certainly appealing, but the real value of a successful campaign is knowing that other people value your concept and are willing to pay for it. Justin Wilcox described in his proposal how you can A/B test multiple campaigns to test different price points. Although I think that's a great addition (especially considering how his test found a higher conversion rate for the higher price point), I don't think determining how much someone will pay is as important at the initial stage as determining whether anyone will pay. I think there would be more value in A/B testing different marketing pitches than different prices.</p>

<p>I do agree with his advice to define your goal in terms of the number of backers (5,000 in his case) instead of some dollar value. Finding backers for your concept means that other people have and recognize the problem you are trying to solve. Knowing that, you can market more ambitious products or services to this base in the future (such as the premium features mentioned above).</p>

<h2>Kickstarter and its alternatives</h2>

<p>I've been using the terms "crowdfunding" and "Kickstarter" interchangeably, which seems fair given the company's success in popularizing the concept. But there are certainly other alternatives, such as <a href="http://www.indiegogo.com/">IndieGoGo</a> and <a href="http://selfstarter.us/">Selfstarter</a>, which might be more appropriate. Kickstarter's popularity provides immediate visibility for your project and their reputation adds legitimacy, but they do set restrictions that might preclude your project. In particular, <a href="http://www.kickstarter.com/help/guidelines">their guidelines</a> state: "Design and Technology projects that are developing new hardware or products must show on their project pages a functional prototype". I'm unsure how often this rule is enforced, but it certainly seems to rule out our ideal scenario of launching a campaign instead of building a prototype. Depending on the complexity of your concept, you might be able to build a very simple proof-of-concept and then ask for funding to complete the feature set. Kickstarter also forbids concepts that require on-going maintenance, which eliminates most Software-as-a-Service concepts as well.</p>

<p>I don't believe IndieGoGo has any similar restrictions. Selfstarter (as a DIY option) is certainly available for any project.</p>

<h2>A place to start</h2>

<p>I think this concept is particularly compelling because it offers non-technical founders a concrete place to start. Convincing a developer to build your prototype is difficult, especially if you only have a vague idea and no hard skills to offer. Creating a crowdfunding campaign requires you to clearly articulate your vision and to pitch your concept in an exciting way, which is exactly what you'll need to do in order to recruit. A small amount of crowdfunding capital demonstrates significant traction, even more so than a lengthy waiting list on LaunchRock. More importantly, even a failed campaign isn't a waste of time. The skills you need to successfully complete a crowdfunding campaign are easily transferable to marketing an early stage startup, so it's certainly worthwhile nurturing those skills early.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A blog is a mini-startup]]></title>
    <link href="http://leknarf.net/blog/2013/02/09/a-blog-is-a-mini-startup/"/>
    <updated>2013-02-09T14:00:00-05:00</updated>
    <id>http://leknarf.net/blog/2013/02/09/a-blog-is-a-mini-startup</id>
    <content type="html"><![CDATA[<p>Launching a new blog isn't dissimilar to launching a startup. In fact, the difficulties in launching a blog are effectively a sub-set of the key problems to solve when creating a startup. Specifically, building a new blog requires you to figure out the following questions:</p>

<ul>
<li>Who are your potential readers?</li>
<li>How will those readers find your blog?</li>
<li>Will those readers subscribe, share, comment, or otherwise engage with your content?</li>
<li>What do you expect from a "successful" blog?</li>
</ul>


<!-- more -->


<p>If these questions sound familiar, that's because they are fundamental to the first two steps in Steve Blank's <a href="http://www.amazon.com/gp/product/0976470705/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0976470705&amp;linkCode=as2&amp;tag=leknarf-20" title="">The Four Steps to the Epiphany</a>, namely "Customer Discovery" and "Customer Validation". Creating and marketing a blog is a great way to practice the customer development skills necessary for an early startup, without having to worry about the parallel challenge of product development.</p>

<h2>Customer Discovery</h2>

<p><span class='pullquote-right' data-pullquote='Marketing your blog is almost entirely a problem of execution: you don&#8217;t need a clever new strategy, you just need to get out there and hustle.'>
Discovery is a fairly obvious requirement for a new blog. I don't believe many folks start a blog without at least intending to find readers. Fortunately, the process of finding readers for a blog is far more straightforward than discovering potential customers for a startup. There's already a large market of people who read other blogs, you just need to convince them that yours is at least worth a cursory skim. And there's already an established base of communities like <a href="http://news.ycombinator.com">hacker news</a> and <a href="http://reddit.com">reddit</a> that exist primarily for readers to discover, share, and discuss new content. Marketing your blog is almost entirely a problem of execution: you don't need a clever new strategy, you just need to get out there and hustle. This is far easier than discovering customers for a new product category.
</span></p>

<p>More importantly, by accepting that building a readership just requires some honest labor, you can avoid a common pitfall. Smart people (particularly developers) enjoy thinking about ways to do their jobs more efficiently. When building a startup, it's tempting to spend so much time thinking about ways to reach new customers that you never actually get around to speaking to any. This is obviously absurd in the context of building a blog's readership. Working on developing your blog's reach is a great way to develop a habit of doing instead of just planning.</p>

<h2>Customer Validation</h2>

<p><span class='pullquote-right' data-pullquote='A blog doesn&#8217;t have to become a revenue stream to be successful, but it is important to identify some possible benefits, consider how feasible they are, and figure out what sort of readers you want.'>
Validation requires a little more thought. For a commercial startup, validation usually revolves around assessing willingness to pay. A blog doesn't have to become a revenue stream to be successful, but it is important to identify some possible benefits, consider how feasible they are, and figure out what sort of readers you want. It's not necessary for your readers to pay you directly, but it is important to identify some sort of desired action you want to encourage.
</span></p>

<p>In particular, some plausible motivations for blogging are to:</p>

<ul>
<li>Articulate and develop your own thoughts: Thinking is easy; writing is hard. Ideas are tough to nail down. Something that sounds wonderful bouncing around in your head can look outright preposterous once it finds its way to paper. Writing things down and sharing them is a straightforward way to develop intellectual honesty. You can get some benefits from writing even without a readership, but ideally, you'll want to find thoughtful readers who are interested in discussing your ideas and challenging your assumptions. If you happen to build up a large pool of readers who never comment or engage with you, then you haven't found the right readers and should re-consider your discovery efforts.</li>
<li>Establish some bona fides. Perhaps you've been reading this blog and thought to yourself, "That chap seems to know what's up." Validation for this goal can be as simple as collecting points. Unlike the above, silent readers are okay for this goal, provided that they're willing to up vote your content on social media sites.</li>
<li>Direct some traffic to another project, such as my <a href="http://getlambda.com">current startup</a>. This is starting to get more difficult, but is still pretty reasonable. Readers of this blog probably like startups, I've got one, so perhaps you'd like to take a look at mine? This thought process quickly breaks down if there isn't a straightforward connection between the blog's content and the project in question. A photo-blog of cat cartoons is odd marketing for an enterprise software company, but might work out if <a href="http://octodex.github.com/">done right</a>. The key metric here is simple: you want to review the conversation funnel for your other project and compare traffic from your blog with other traffic sources.</li>
</ul>


<h2>Practice the hard stuff</h2>

<p>Startups are hard. There's no way around that. You're unlikely to find immediate success regardless, but you can improve your chances by developing relevant skills. Software developers are often tempted to focus on becoming better developers. Product development is certainly relevant to any startup, but the challenge for most early startups is finding customers. Learning the latest web framework won't help you validate a business model, but finding readers for a new blog is a great way to learn and practice customer development.</p>
]]></content>
  </entry>
  
</feed>
